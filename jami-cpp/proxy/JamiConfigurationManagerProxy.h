
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__JamiConfigurationManagerProxy_h__proxy__H__
#define __sdbuscpp__JamiConfigurationManagerProxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace cx {
namespace ring {
namespace Ring {

class ConfigurationManager_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "cx.ring.Ring.ConfigurationManager";

protected:
    ConfigurationManager_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
        proxy_.uponSignal("exportOnRingEnded").onInterface(INTERFACE_NAME).call([this](const std::string& accountID, const int32_t& status, const std::string& PIN){ this->onExportOnRingEnded(accountID, status, PIN); });
        proxy_.uponSignal("deviceRevocationEnded").onInterface(INTERFACE_NAME).call([this](const std::string& accountID, const std::string& deviceId, const int32_t& status){ this->onDeviceRevocationEnded(accountID, deviceId, status); });
        proxy_.uponSignal("accountProfileReceived").onInterface(INTERFACE_NAME).call([this](const std::string& accountID, const std::string& displayName, const std::string& photo){ this->onAccountProfileReceived(accountID, displayName, photo); });
        proxy_.uponSignal("knownDevicesChanged").onInterface(INTERFACE_NAME).call([this](const std::string& accountID, const std::map<std::string, std::string>& devices){ this->onKnownDevicesChanged(accountID, devices); });
        proxy_.uponSignal("registeredNameFound").onInterface(INTERFACE_NAME).call([this](const std::string& accountID, const int32_t& status, const std::string& address, const std::string& name){ this->onRegisteredNameFound(accountID, status, address, name); });
        proxy_.uponSignal("nameRegistrationEnded").onInterface(INTERFACE_NAME).call([this](const std::string& accountID, const int32_t& status, const std::string& name){ this->onNameRegistrationEnded(accountID, status, name); });
        proxy_.uponSignal("userSearchEnded").onInterface(INTERFACE_NAME).call([this](const std::string& accountID, const int32_t& status, const std::string& query, const std::vector<std::map<std::string, std::string>>& result){ this->onUserSearchEnded(accountID, status, query, result); });
        proxy_.uponSignal("incomingAccountMessage").onInterface(INTERFACE_NAME).call([this](const std::string& accountID, const std::string& messageID, const std::string& from, const std::map<std::string, std::string>& payloads){ this->onIncomingAccountMessage(accountID, messageID, from, payloads); });
        proxy_.uponSignal("accountMessageStatusChanged").onInterface(INTERFACE_NAME).call([this](const std::string& accountID, const std::string& conversationId, const std::string& peer, const std::string& id, const int32_t& status){ this->onAccountMessageStatusChanged(accountID, conversationId, peer, id, status); });
        proxy_.uponSignal("profileReceived").onInterface(INTERFACE_NAME).call([this](const std::string& accountID, const std::string& from, const std::string& path){ this->onProfileReceived(accountID, from, path); });
        proxy_.uponSignal("composingStatusChanged").onInterface(INTERFACE_NAME).call([this](const std::string& accountId, const std::string& conversationId, const std::string& contactId, const int32_t& status){ this->onComposingStatusChanged(accountId, conversationId, contactId, status); });
        proxy_.uponSignal("volumeChanged").onInterface(INTERFACE_NAME).call([this](const std::string& device, const double& value){ this->onVolumeChanged(device, value); });
        proxy_.uponSignal("hardwareDecodingChanged").onInterface(INTERFACE_NAME).call([this](const bool& state){ this->onHardwareDecodingChanged(state); });
        proxy_.uponSignal("hardwareEncodingChanged").onInterface(INTERFACE_NAME).call([this](const bool& state){ this->onHardwareEncodingChanged(state); });
        proxy_.uponSignal("audioDeviceEvent").onInterface(INTERFACE_NAME).call([this](){ this->onAudioDeviceEvent(); });
        proxy_.uponSignal("audioMeter").onInterface(INTERFACE_NAME).call([this](const std::string& id, const double& level){ this->onAudioMeter(id, level); });
        proxy_.uponSignal("accountsChanged").onInterface(INTERFACE_NAME).call([this](){ this->onAccountsChanged(); });
        proxy_.uponSignal("accountDetailsChanged").onInterface(INTERFACE_NAME).call([this](const std::string& accountID, const std::map<std::string, std::string>& details){ this->onAccountDetailsChanged(accountID, details); });
        proxy_.uponSignal("registrationStateChanged").onInterface(INTERFACE_NAME).call([this](const std::string& accountID, const std::string& registrationState, const int32_t& registrationDetail, const std::string& registrationDetailStr){ this->onRegistrationStateChanged(accountID, registrationState, registrationDetail, registrationDetailStr); });
        proxy_.uponSignal("volatileAccountDetailsChanged").onInterface(INTERFACE_NAME).call([this](const std::string& accountID, const std::map<std::string, std::string>& details){ this->onVolatileAccountDetailsChanged(accountID, details); });
        proxy_.uponSignal("stunStatusFailure").onInterface(INTERFACE_NAME).call([this](const std::string& reason){ this->onStunStatusFailure(reason); });
        proxy_.uponSignal("errorAlert").onInterface(INTERFACE_NAME).call([this](const int32_t& code){ this->onErrorAlert(code); });
        proxy_.uponSignal("certificateStateChanged").onInterface(INTERFACE_NAME).call([this](const std::string& accountId, const std::string& certId, const std::string& state){ this->onCertificateStateChanged(accountId, certId, state); });
        proxy_.uponSignal("certificatePinned").onInterface(INTERFACE_NAME).call([this](const std::string& certId){ this->onCertificatePinned(certId); });
        proxy_.uponSignal("certificatePathPinned").onInterface(INTERFACE_NAME).call([this](const std::string& path, const std::vector<std::string>& certIds){ this->onCertificatePathPinned(path, certIds); });
        proxy_.uponSignal("certificateExpired").onInterface(INTERFACE_NAME).call([this](const std::string& certId){ this->onCertificateExpired(certId); });
        proxy_.uponSignal("incomingTrustRequest").onInterface(INTERFACE_NAME).call([this](const std::string& accountID, const std::string& conversationId, const std::string& from, const std::vector<uint8_t>& payload, const uint64_t& receiveTime){ this->onIncomingTrustRequest(accountID, conversationId, from, payload, receiveTime); });
        proxy_.uponSignal("contactAdded").onInterface(INTERFACE_NAME).call([this](const std::string& accountID, const std::string& uri, const bool& confirmed){ this->onContactAdded(accountID, uri, confirmed); });
        proxy_.uponSignal("contactRemoved").onInterface(INTERFACE_NAME).call([this](const std::string& accountID, const std::string& uri, const bool& banned){ this->onContactRemoved(accountID, uri, banned); });
        proxy_.uponSignal("mediaParametersChanged").onInterface(INTERFACE_NAME).call([this](const std::string& accountID){ this->onMediaParametersChanged(accountID); });
        proxy_.uponSignal("migrationEnded").onInterface(INTERFACE_NAME).call([this](const std::string& accountID, const std::string& result){ this->onMigrationEnded(accountID, result); });
        proxy_.uponSignal("dataTransferEvent").onInterface(INTERFACE_NAME).call([this](const std::string& accountId, const std::string& conversationId, const std::string& interactionId, const std::string& fileId, const int32_t& code){ this->onDataTransferEvent(accountId, conversationId, interactionId, fileId, code); });
        proxy_.uponSignal("conversationLoaded").onInterface(INTERFACE_NAME).call([this](const uint32_t& id, const std::string& account_id, const std::string& conversation_id, const std::vector<std::map<std::string, std::string>>& messages){ this->onConversationLoaded(id, account_id, conversation_id, messages); });
        proxy_.uponSignal("messageReceived").onInterface(INTERFACE_NAME).call([this](const std::string& account_id, const std::string& conversation_id, const std::map<std::string, std::string>& message){ this->onMessageReceived(account_id, conversation_id, message); });
        proxy_.uponSignal("conversationRequestReceived").onInterface(INTERFACE_NAME).call([this](const std::string& account_id, const std::string& conversation_id, const std::map<std::string, std::string>& metadatas){ this->onConversationRequestReceived(account_id, conversation_id, metadatas); });
        proxy_.uponSignal("conversationRequestDeclined").onInterface(INTERFACE_NAME).call([this](const std::string& account_id, const std::string& conversation_id){ this->onConversationRequestDeclined(account_id, conversation_id); });
        proxy_.uponSignal("conversationReady").onInterface(INTERFACE_NAME).call([this](const std::string& account_id, const std::string& conversation_id){ this->onConversationReady(account_id, conversation_id); });
        proxy_.uponSignal("conversationRemoved").onInterface(INTERFACE_NAME).call([this](const std::string& account_id, const std::string& conversation_id){ this->onConversationRemoved(account_id, conversation_id); });
        proxy_.uponSignal("conversationMemberEvent").onInterface(INTERFACE_NAME).call([this](const std::string& account_id, const std::string& conversation_id, const std::string& member_uri, const int32_t& event){ this->onConversationMemberEvent(account_id, conversation_id, member_uri, event); });
        proxy_.uponSignal("onConversationError").onInterface(INTERFACE_NAME).call([this](const std::string& account_id, const std::string& conversation_id, const uint32_t& code, const std::string& what){ this->onOnConversationError(account_id, conversation_id, code, what); });
        proxy_.uponSignal("debugMessageReceived").onInterface(INTERFACE_NAME).call([this](const std::string& message){ this->onDebugMessageReceived(message); });
        proxy_.uponSignal("messageSend").onInterface(INTERFACE_NAME).call([this](const std::string& message){ this->onMessageSend(message); });
    }

    ~ConfigurationManager_proxy() = default;

    virtual void onExportOnRingEnded(const std::string& accountID, const int32_t& status, const std::string& PIN) = 0;
    virtual void onDeviceRevocationEnded(const std::string& accountID, const std::string& deviceId, const int32_t& status) = 0;
    virtual void onAccountProfileReceived(const std::string& accountID, const std::string& displayName, const std::string& photo) = 0;
    virtual void onKnownDevicesChanged(const std::string& accountID, const std::map<std::string, std::string>& devices) = 0;
    virtual void onRegisteredNameFound(const std::string& accountID, const int32_t& status, const std::string& address, const std::string& name) = 0;
    virtual void onNameRegistrationEnded(const std::string& accountID, const int32_t& status, const std::string& name) = 0;
    virtual void onUserSearchEnded(const std::string& accountID, const int32_t& status, const std::string& query, const std::vector<std::map<std::string, std::string>>& result) = 0;
    virtual void onIncomingAccountMessage(const std::string& accountID, const std::string& messageID, const std::string& from, const std::map<std::string, std::string>& payloads) = 0;
    virtual void onAccountMessageStatusChanged(const std::string& accountID, const std::string& conversationId, const std::string& peer, const std::string& id, const int32_t& status) = 0;
    virtual void onProfileReceived(const std::string& accountID, const std::string& from, const std::string& path) = 0;
    virtual void onComposingStatusChanged(const std::string& accountId, const std::string& conversationId, const std::string& contactId, const int32_t& status) = 0;
    virtual void onVolumeChanged(const std::string& device, const double& value) = 0;
    virtual void onHardwareDecodingChanged(const bool& state) = 0;
    virtual void onHardwareEncodingChanged(const bool& state) = 0;
    virtual void onAudioDeviceEvent() = 0;
    virtual void onAudioMeter(const std::string& id, const double& level) = 0;
    virtual void onAccountsChanged() = 0;
    virtual void onAccountDetailsChanged(const std::string& accountID, const std::map<std::string, std::string>& details) = 0;
    virtual void onRegistrationStateChanged(const std::string& accountID, const std::string& registrationState, const int32_t& registrationDetail, const std::string& registrationDetailStr) = 0;
    virtual void onVolatileAccountDetailsChanged(const std::string& accountID, const std::map<std::string, std::string>& details) = 0;
    virtual void onStunStatusFailure(const std::string& reason) = 0;
    virtual void onErrorAlert(const int32_t& code) = 0;
    virtual void onCertificateStateChanged(const std::string& accountId, const std::string& certId, const std::string& state) = 0;
    virtual void onCertificatePinned(const std::string& certId) = 0;
    virtual void onCertificatePathPinned(const std::string& path, const std::vector<std::string>& certIds) = 0;
    virtual void onCertificateExpired(const std::string& certId) = 0;
    virtual void onIncomingTrustRequest(const std::string& accountID, const std::string& conversationId, const std::string& from, const std::vector<uint8_t>& payload, const uint64_t& receiveTime) = 0;
    virtual void onContactAdded(const std::string& accountID, const std::string& uri, const bool& confirmed) = 0;
    virtual void onContactRemoved(const std::string& accountID, const std::string& uri, const bool& banned) = 0;
    virtual void onMediaParametersChanged(const std::string& accountID) = 0;
    virtual void onMigrationEnded(const std::string& accountID, const std::string& result) = 0;
    virtual void onDataTransferEvent(const std::string& accountId, const std::string& conversationId, const std::string& interactionId, const std::string& fileId, const int32_t& code) = 0;
    virtual void onConversationLoaded(const uint32_t& id, const std::string& account_id, const std::string& conversation_id, const std::vector<std::map<std::string, std::string>>& messages) = 0;
    virtual void onMessageReceived(const std::string& account_id, const std::string& conversation_id, const std::map<std::string, std::string>& message) = 0;
    virtual void onConversationRequestReceived(const std::string& account_id, const std::string& conversation_id, const std::map<std::string, std::string>& metadatas) = 0;
    virtual void onConversationRequestDeclined(const std::string& account_id, const std::string& conversation_id) = 0;
    virtual void onConversationReady(const std::string& account_id, const std::string& conversation_id) = 0;
    virtual void onConversationRemoved(const std::string& account_id, const std::string& conversation_id) = 0;
    virtual void onConversationMemberEvent(const std::string& account_id, const std::string& conversation_id, const std::string& member_uri, const int32_t& event) = 0;
    virtual void onOnConversationError(const std::string& account_id, const std::string& conversation_id, const uint32_t& code, const std::string& what) = 0;
    virtual void onDebugMessageReceived(const std::string& message) = 0;
    virtual void onMessageSend(const std::string& message) = 0;

public:
    std::map<std::string, std::string> getAccountTemplate(const std::string& accountType)
    {
        std::map<std::string, std::string> result;
        proxy_.callMethod("getAccountTemplate").onInterface(INTERFACE_NAME).withArguments(accountType).storeResultsTo(result);
        return result;
    }

    std::map<std::string, std::string> getAccountDetails(const std::string& accountID)
    {
        std::map<std::string, std::string> result;
        proxy_.callMethod("getAccountDetails").onInterface(INTERFACE_NAME).withArguments(accountID).storeResultsTo(result);
        return result;
    }

    std::map<std::string, std::string> getVolatileAccountDetails(const std::string& accountID)
    {
        std::map<std::string, std::string> result;
        proxy_.callMethod("getVolatileAccountDetails").onInterface(INTERFACE_NAME).withArguments(accountID).storeResultsTo(result);
        return result;
    }

    void setAccountDetails(const std::string& accountID, const std::map<std::string, std::string>& details)
    {
        proxy_.callMethod("setAccountDetails").onInterface(INTERFACE_NAME).withArguments(accountID, details);
    }

    void setAccountActive(const std::string& accountID, const bool& enable)
    {
        proxy_.callMethod("setAccountActive").onInterface(INTERFACE_NAME).withArguments(accountID, enable);
    }

    void setCredentials(const std::string& accountID, const std::vector<std::map<std::string, std::string>>& credentialInformation)
    {
        proxy_.callMethod("setCredentials").onInterface(INTERFACE_NAME).withArguments(accountID, credentialInformation);
    }

    std::vector<std::map<std::string, std::string>> getCredentials(const std::string& accountID)
    {
        std::vector<std::map<std::string, std::string>> result;
        proxy_.callMethod("getCredentials").onInterface(INTERFACE_NAME).withArguments(accountID).storeResultsTo(result);
        return result;
    }

    std::string addAccount(const std::map<std::string, std::string>& details)
    {
        std::string result;
        proxy_.callMethod("addAccount").onInterface(INTERFACE_NAME).withArguments(details).storeResultsTo(result);
        return result;
    }

    bool exportOnRing(const std::string& accountID, const std::string& password)
    {
        bool result;
        proxy_.callMethod("exportOnRing").onInterface(INTERFACE_NAME).withArguments(accountID, password).storeResultsTo(result);
        return result;
    }

    bool exportToFile(const std::string& accountID, const std::string& destinationPath, const std::string& password)
    {
        bool result;
        proxy_.callMethod("exportToFile").onInterface(INTERFACE_NAME).withArguments(accountID, destinationPath, password).storeResultsTo(result);
        return result;
    }

    bool revokeDevice(const std::string& accountID, const std::string& password, const std::string& deviceId)
    {
        bool result;
        proxy_.callMethod("revokeDevice").onInterface(INTERFACE_NAME).withArguments(accountID, password, deviceId).storeResultsTo(result);
        return result;
    }

    std::map<std::string, std::string> getKnownRingDevices(const std::string& accountID)
    {
        std::map<std::string, std::string> result;
        proxy_.callMethod("getKnownRingDevices").onInterface(INTERFACE_NAME).withArguments(accountID).storeResultsTo(result);
        return result;
    }

    bool changeAccountPassword(const std::string& accountID, const std::string& oldPassword, const std::string& newPassword)
    {
        bool result;
        proxy_.callMethod("changeAccountPassword").onInterface(INTERFACE_NAME).withArguments(accountID, oldPassword, newPassword).storeResultsTo(result);
        return result;
    }

    bool lookupName(const std::string& accountID, const std::string& nameserverUri, const std::string& name)
    {
        bool result;
        proxy_.callMethod("lookupName").onInterface(INTERFACE_NAME).withArguments(accountID, nameserverUri, name).storeResultsTo(result);
        return result;
    }

    bool lookupAddress(const std::string& accountID, const std::string& nameserverUri, const std::string& address)
    {
        bool result;
        proxy_.callMethod("lookupAddress").onInterface(INTERFACE_NAME).withArguments(accountID, nameserverUri, address).storeResultsTo(result);
        return result;
    }

    bool registerName(const std::string& accountID, const std::string& password, const std::string& name)
    {
        bool result;
        proxy_.callMethod("registerName").onInterface(INTERFACE_NAME).withArguments(accountID, password, name).storeResultsTo(result);
        return result;
    }

    bool searchUser(const std::string& accountID, const std::string& query)
    {
        bool result;
        proxy_.callMethod("searchUser").onInterface(INTERFACE_NAME).withArguments(accountID, query).storeResultsTo(result);
        return result;
    }

    void setAccountsOrder(const std::string& order)
    {
        proxy_.callMethod("setAccountsOrder").onInterface(INTERFACE_NAME).withArguments(order);
    }

    void removeAccount(const std::string& accoundID)
    {
        proxy_.callMethod("removeAccount").onInterface(INTERFACE_NAME).withArguments(accoundID);
    }

    std::vector<std::string> getAccountList()
    {
        std::vector<std::string> result;
        proxy_.callMethod("getAccountList").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void registerAllAccounts()
    {
        proxy_.callMethod("registerAllAccounts").onInterface(INTERFACE_NAME);
    }

    void sendRegister(const std::string& accountID, const bool& enable)
    {
        proxy_.callMethod("sendRegister").onInterface(INTERFACE_NAME).withArguments(accountID, enable);
    }

    uint64_t sendTextMessage(const std::string& accountID, const std::string& to, const std::map<std::string, std::string>& payloads)
    {
        uint64_t result;
        proxy_.callMethod("sendTextMessage").onInterface(INTERFACE_NAME).withArguments(accountID, to, payloads).storeResultsTo(result);
        return result;
    }

    bool cancelMessage(const std::string& accountID, const uint64_t& id)
    {
        bool result;
        proxy_.callMethod("cancelMessage").onInterface(INTERFACE_NAME).withArguments(accountID, id).storeResultsTo(result);
        return result;
    }

    std::vector<sdbus::Struct<std::string, std::map<std::string, std::string>, uint64_t>> getLastMessages(const std::string& accountID, const uint64_t& base_timestamp)
    {
        std::vector<sdbus::Struct<std::string, std::map<std::string, std::string>, uint64_t>> result;
        proxy_.callMethod("getLastMessages").onInterface(INTERFACE_NAME).withArguments(accountID, base_timestamp).storeResultsTo(result);
        return result;
    }

    std::map<std::string, std::string> getNearbyPeers(const std::string& accountID)
    {
        std::map<std::string, std::string> result;
        proxy_.callMethod("getNearbyPeers").onInterface(INTERFACE_NAME).withArguments(accountID).storeResultsTo(result);
        return result;
    }

    int32_t getMessageStatus(const uint64_t& id)
    {
        int32_t result;
        proxy_.callMethod("getMessageStatus").onInterface(INTERFACE_NAME).withArguments(id).storeResultsTo(result);
        return result;
    }

    void setIsComposing(const std::string& accountId, const std::string& conversationUri, const bool& isComposing)
    {
        proxy_.callMethod("setIsComposing").onInterface(INTERFACE_NAME).withArguments(accountId, conversationUri, isComposing);
    }

    bool setMessageDisplayed(const std::string& accountId, const std::string& conversationUri, const std::string& messageId, const int32_t& status)
    {
        bool result;
        proxy_.callMethod("setMessageDisplayed").onInterface(INTERFACE_NAME).withArguments(accountId, conversationUri, messageId, status).storeResultsTo(result);
        return result;
    }

    void setVolume(const std::string& device, const double& value)
    {
        proxy_.callMethod("setVolume").onInterface(INTERFACE_NAME).withArguments(device, value);
    }

    double getVolume(const std::string& device)
    {
        double result;
        proxy_.callMethod("getVolume").onInterface(INTERFACE_NAME).withArguments(device).storeResultsTo(result);
        return result;
    }

    void muteDtmf(const bool& mute)
    {
        proxy_.callMethod("muteDtmf").onInterface(INTERFACE_NAME).withArguments(mute);
    }

    bool isDtmfMuted()
    {
        bool result;
        proxy_.callMethod("isDtmfMuted").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void muteCapture(const bool& mute)
    {
        proxy_.callMethod("muteCapture").onInterface(INTERFACE_NAME).withArguments(mute);
    }

    bool isCaptureMuted()
    {
        bool result;
        proxy_.callMethod("isCaptureMuted").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void mutePlayback(const bool& mute)
    {
        proxy_.callMethod("mutePlayback").onInterface(INTERFACE_NAME).withArguments(mute);
    }

    bool isPlaybackMuted()
    {
        bool result;
        proxy_.callMethod("isPlaybackMuted").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void muteRingtone(const bool& mute)
    {
        proxy_.callMethod("muteRingtone").onInterface(INTERFACE_NAME).withArguments(mute);
    }

    bool isRingtoneMuted()
    {
        bool result;
        proxy_.callMethod("isRingtoneMuted").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    std::string getAudioManager()
    {
        std::string result;
        proxy_.callMethod("getAudioManager").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    bool setAudioManager(const std::string& api)
    {
        bool result;
        proxy_.callMethod("setAudioManager").onInterface(INTERFACE_NAME).withArguments(api).storeResultsTo(result);
        return result;
    }

    std::vector<std::string> getSupportedAudioManagers()
    {
        std::vector<std::string> result;
        proxy_.callMethod("getSupportedAudioManagers").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    std::string getRecordPath()
    {
        std::string result;
        proxy_.callMethod("getRecordPath").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setRecordPath(const std::string& rec)
    {
        proxy_.callMethod("setRecordPath").onInterface(INTERFACE_NAME).withArguments(rec);
    }

    bool getIsAlwaysRecording()
    {
        bool result;
        proxy_.callMethod("getIsAlwaysRecording").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setIsAlwaysRecording(const bool& enabled)
    {
        proxy_.callMethod("setIsAlwaysRecording").onInterface(INTERFACE_NAME).withArguments(enabled);
    }

    bool getRecordPreview()
    {
        bool result;
        proxy_.callMethod("getRecordPreview").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setRecordPreview(const bool& enabled)
    {
        proxy_.callMethod("setRecordPreview").onInterface(INTERFACE_NAME).withArguments(enabled);
    }

    int32_t getRecordQuality()
    {
        int32_t result;
        proxy_.callMethod("getRecordQuality").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setRecordQuality(const int32_t& enabled)
    {
        proxy_.callMethod("setRecordQuality").onInterface(INTERFACE_NAME).withArguments(enabled);
    }

    std::vector<uint32_t> getCodecList()
    {
        std::vector<uint32_t> result;
        proxy_.callMethod("getCodecList").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    std::map<std::string, std::string> getCodecDetails(const std::string& accountID, const uint32_t& codecId)
    {
        std::map<std::string, std::string> result;
        proxy_.callMethod("getCodecDetails").onInterface(INTERFACE_NAME).withArguments(accountID, codecId).storeResultsTo(result);
        return result;
    }

    bool setCodecDetails(const std::string& accountID, const uint32_t& codecId, const std::map<std::string, std::string>& details)
    {
        bool result;
        proxy_.callMethod("setCodecDetails").onInterface(INTERFACE_NAME).withArguments(accountID, codecId, details).storeResultsTo(result);
        return result;
    }

    std::vector<uint32_t> getActiveCodecList(const std::string& accountID)
    {
        std::vector<uint32_t> result;
        proxy_.callMethod("getActiveCodecList").onInterface(INTERFACE_NAME).withArguments(accountID).storeResultsTo(result);
        return result;
    }

    void setActiveCodecList(const std::string& accountID, const std::vector<uint32_t>& list)
    {
        proxy_.callMethod("setActiveCodecList").onInterface(INTERFACE_NAME).withArguments(accountID, list);
    }

    std::vector<std::string> getAudioPluginList()
    {
        std::vector<std::string> result;
        proxy_.callMethod("getAudioPluginList").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setAudioPlugin(const std::string& audioPlugin)
    {
        proxy_.callMethod("setAudioPlugin").onInterface(INTERFACE_NAME).withArguments(audioPlugin);
    }

    std::vector<std::string> getAudioOutputDeviceList()
    {
        std::vector<std::string> result;
        proxy_.callMethod("getAudioOutputDeviceList").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setAudioOutputDevice(const int32_t& index)
    {
        proxy_.callMethod("setAudioOutputDevice").onInterface(INTERFACE_NAME).withArguments(index);
    }

    void setAudioInputDevice(const int32_t& index)
    {
        proxy_.callMethod("setAudioInputDevice").onInterface(INTERFACE_NAME).withArguments(index);
    }

    void setAudioRingtoneDevice(const int32_t& index)
    {
        proxy_.callMethod("setAudioRingtoneDevice").onInterface(INTERFACE_NAME).withArguments(index);
    }

    std::vector<std::string> getAudioInputDeviceList()
    {
        std::vector<std::string> result;
        proxy_.callMethod("getAudioInputDeviceList").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    std::vector<std::string> getCurrentAudioDevicesIndex()
    {
        std::vector<std::string> result;
        proxy_.callMethod("getCurrentAudioDevicesIndex").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    int32_t getAudioInputDeviceIndex(const std::string& devname)
    {
        int32_t result;
        proxy_.callMethod("getAudioInputDeviceIndex").onInterface(INTERFACE_NAME).withArguments(devname).storeResultsTo(result);
        return result;
    }

    int32_t getAudioOutputDeviceIndex(const std::string& devname)
    {
        int32_t result;
        proxy_.callMethod("getAudioOutputDeviceIndex").onInterface(INTERFACE_NAME).withArguments(devname).storeResultsTo(result);
        return result;
    }

    std::string getCurrentAudioOutputPlugin()
    {
        std::string result;
        proxy_.callMethod("getCurrentAudioOutputPlugin").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    bool isAudioMeterActive(const std::string& id)
    {
        bool result;
        proxy_.callMethod("isAudioMeterActive").onInterface(INTERFACE_NAME).withArguments(id).storeResultsTo(result);
        return result;
    }

    void setAudioMeterState(const std::string& id, const bool& state)
    {
        proxy_.callMethod("setAudioMeterState").onInterface(INTERFACE_NAME).withArguments(id, state);
    }

    bool getNoiseSuppressState()
    {
        bool result;
        proxy_.callMethod("getNoiseSuppressState").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setNoiseSuppressState(const bool& state)
    {
        proxy_.callMethod("setNoiseSuppressState").onInterface(INTERFACE_NAME).withArguments(state);
    }

    bool isAgcEnabled()
    {
        bool result;
        proxy_.callMethod("isAgcEnabled").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setAgcState(const bool& enabled)
    {
        proxy_.callMethod("setAgcState").onInterface(INTERFACE_NAME).withArguments(enabled);
    }

    int32_t getHistoryLimit()
    {
        int32_t result;
        proxy_.callMethod("getHistoryLimit").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setHistoryLimit(const int32_t& days)
    {
        proxy_.callMethod("setHistoryLimit").onInterface(INTERFACE_NAME).withArguments(days);
    }

    int32_t getRingingTimeout()
    {
        int32_t result;
        proxy_.callMethod("getRingingTimeout").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setRingingTimeout(const int32_t& timeout)
    {
        proxy_.callMethod("setRingingTimeout").onInterface(INTERFACE_NAME).withArguments(timeout);
    }

    std::vector<std::string> getSupportedTlsMethod()
    {
        std::vector<std::string> result;
        proxy_.callMethod("getSupportedTlsMethod").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    std::vector<std::string> getSupportedCiphers(const std::string& accountID)
    {
        std::vector<std::string> result;
        proxy_.callMethod("getSupportedCiphers").onInterface(INTERFACE_NAME).withArguments(accountID).storeResultsTo(result);
        return result;
    }

    std::map<std::string, std::string> validateCertificate(const std::string& accountId, const std::string& certificate)
    {
        std::map<std::string, std::string> result;
        proxy_.callMethod("validateCertificate").onInterface(INTERFACE_NAME).withArguments(accountId, certificate).storeResultsTo(result);
        return result;
    }

    std::map<std::string, std::string> validateCertificatePath(const std::string& accountId, const std::string& certificatePath, const std::string& privateKeyPath, const std::string& privateKeyPasswd, const std::string& caListPath)
    {
        std::map<std::string, std::string> result;
        proxy_.callMethod("validateCertificatePath").onInterface(INTERFACE_NAME).withArguments(accountId, certificatePath, privateKeyPath, privateKeyPasswd, caListPath).storeResultsTo(result);
        return result;
    }

    std::map<std::string, std::string> getCertificateDetails(const std::string& certificate)
    {
        std::map<std::string, std::string> result;
        proxy_.callMethod("getCertificateDetails").onInterface(INTERFACE_NAME).withArguments(certificate).storeResultsTo(result);
        return result;
    }

    std::map<std::string, std::string> getCertificateDetailsPath(const std::string& certificatePath, const std::string& privateKeyPath, const std::string& privateKeyPasswd)
    {
        std::map<std::string, std::string> result;
        proxy_.callMethod("getCertificateDetailsPath").onInterface(INTERFACE_NAME).withArguments(certificatePath, privateKeyPath, privateKeyPasswd).storeResultsTo(result);
        return result;
    }

    std::vector<std::string> getPinnedCertificates()
    {
        std::vector<std::string> result;
        proxy_.callMethod("getPinnedCertificates").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    std::vector<std::string> pinCertificate(const std::vector<uint8_t>& certificateRaw, const bool& local)
    {
        std::vector<std::string> result;
        proxy_.callMethod("pinCertificate").onInterface(INTERFACE_NAME).withArguments(certificateRaw, local).storeResultsTo(result);
        return result;
    }

    bool unpinCertificate(const std::string& certId)
    {
        bool result;
        proxy_.callMethod("unpinCertificate").onInterface(INTERFACE_NAME).withArguments(certId).storeResultsTo(result);
        return result;
    }

    void pinCertificatePath(const std::string& certPath)
    {
        proxy_.callMethod("pinCertificatePath").onInterface(INTERFACE_NAME).withArguments(certPath);
    }

    uint32_t unpinCertificatePath(const std::string& certPath)
    {
        uint32_t result;
        proxy_.callMethod("unpinCertificatePath").onInterface(INTERFACE_NAME).withArguments(certPath).storeResultsTo(result);
        return result;
    }

    bool pinRemoteCertificate(const std::string& accountId, const std::string& certId)
    {
        bool result;
        proxy_.callMethod("pinRemoteCertificate").onInterface(INTERFACE_NAME).withArguments(accountId, certId).storeResultsTo(result);
        return result;
    }

    bool setCertificateStatus(const std::string& accountId, const std::string& certId, const std::string& status)
    {
        bool result;
        proxy_.callMethod("setCertificateStatus").onInterface(INTERFACE_NAME).withArguments(accountId, certId, status).storeResultsTo(result);
        return result;
    }

    std::vector<std::string> getCertificatesByStatus(const std::string& accountId, const std::string& status)
    {
        std::vector<std::string> result;
        proxy_.callMethod("getCertificatesByStatus").onInterface(INTERFACE_NAME).withArguments(accountId, status).storeResultsTo(result);
        return result;
    }

    std::vector<std::map<std::string, std::string>> getTrustRequests(const std::string& accountID)
    {
        std::vector<std::map<std::string, std::string>> result;
        proxy_.callMethod("getTrustRequests").onInterface(INTERFACE_NAME).withArguments(accountID).storeResultsTo(result);
        return result;
    }

    bool acceptTrustRequest(const std::string& accountID, const std::string& from)
    {
        bool result;
        proxy_.callMethod("acceptTrustRequest").onInterface(INTERFACE_NAME).withArguments(accountID, from).storeResultsTo(result);
        return result;
    }

    bool discardTrustRequest(const std::string& accountID, const std::string& from)
    {
        bool result;
        proxy_.callMethod("discardTrustRequest").onInterface(INTERFACE_NAME).withArguments(accountID, from).storeResultsTo(result);
        return result;
    }

    void sendTrustRequest(const std::string& accountID, const std::string& to, const std::vector<uint8_t>& payload)
    {
        proxy_.callMethod("sendTrustRequest").onInterface(INTERFACE_NAME).withArguments(accountID, to, payload);
    }

    void addContact(const std::string& accountID, const std::string& uri)
    {
        proxy_.callMethod("addContact").onInterface(INTERFACE_NAME).withArguments(accountID, uri);
    }

    void removeContact(const std::string& accountID, const std::string& uri, const bool& ban)
    {
        proxy_.callMethod("removeContact").onInterface(INTERFACE_NAME).withArguments(accountID, uri, ban);
    }

    std::map<std::string, std::string> getContactDetails(const std::string& accountID, const std::string& uri)
    {
        std::map<std::string, std::string> result;
        proxy_.callMethod("getContactDetails").onInterface(INTERFACE_NAME).withArguments(accountID, uri).storeResultsTo(result);
        return result;
    }

    std::vector<std::map<std::string, std::string>> getContacts(const std::string& accountID)
    {
        std::vector<std::map<std::string, std::string>> result;
        proxy_.callMethod("getContacts").onInterface(INTERFACE_NAME).withArguments(accountID).storeResultsTo(result);
        return result;
    }

    std::string getAddrFromInterfaceName(const std::string& interface)
    {
        std::string result;
        proxy_.callMethod("getAddrFromInterfaceName").onInterface(INTERFACE_NAME).withArguments(interface).storeResultsTo(result);
        return result;
    }

    std::vector<std::string> getAllIpInterface()
    {
        std::vector<std::string> result;
        proxy_.callMethod("getAllIpInterface").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    std::vector<std::string> getAllIpInterfaceByName()
    {
        std::vector<std::string> result;
        proxy_.callMethod("getAllIpInterfaceByName").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    std::map<std::string, std::string> getShortcuts()
    {
        std::map<std::string, std::string> result;
        proxy_.callMethod("getShortcuts").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void setShortcuts(const std::map<std::string, std::string>& shortcutsMap)
    {
        proxy_.callMethod("setShortcuts").onInterface(INTERFACE_NAME).withArguments(shortcutsMap);
    }

    void sendFile(const std::string& accountId, const std::string& conversationId, const std::string& filePath, const std::string& fileDisplayName, const std::string& parent)
    {
        proxy_.callMethod("sendFile").onInterface(INTERFACE_NAME).withArguments(accountId, conversationId, filePath, fileDisplayName, parent);
    }

    std::tuple<uint32_t, uint64_t> sendFileLegacy(const sdbus::Struct<std::string, uint32_t, uint32_t, int64_t, int64_t, std::string, std::string, std::string, std::string, std::string, std::string>& DataTransferInfo)
    {
        std::tuple<uint32_t, uint64_t> result;
        proxy_.callMethod("sendFileLegacy").onInterface(INTERFACE_NAME).withArguments(DataTransferInfo).storeResultsTo(result);
        return result;
    }

    std::tuple<uint32_t, sdbus::Struct<std::string, uint32_t, uint32_t, int64_t, int64_t, std::string, std::string, std::string, std::string, std::string, std::string>> dataTransferInfo(const std::string& accountId, const std::string& fileId)
    {
        std::tuple<uint32_t, sdbus::Struct<std::string, uint32_t, uint32_t, int64_t, int64_t, std::string, std::string, std::string, std::string, std::string, std::string>> result;
        proxy_.callMethod("dataTransferInfo").onInterface(INTERFACE_NAME).withArguments(accountId, fileId).storeResultsTo(result);
        return result;
    }

    std::tuple<uint32_t, std::string, int64_t, int64_t> fileTransferInfo(const std::string& accountId, const std::string& to, const std::string& fileId)
    {
        std::tuple<uint32_t, std::string, int64_t, int64_t> result;
        proxy_.callMethod("fileTransferInfo").onInterface(INTERFACE_NAME).withArguments(accountId, to, fileId).storeResultsTo(result);
        return result;
    }

    uint32_t acceptFileTransfer(const std::string& accountId, const std::string& fileId, const std::string& filePath)
    {
        uint32_t result;
        proxy_.callMethod("acceptFileTransfer").onInterface(INTERFACE_NAME).withArguments(accountId, fileId, filePath).storeResultsTo(result);
        return result;
    }

    bool downloadFile(const std::string& accountId, const std::string& conversationId, const std::string& interactionId, const std::string& fileId, const std::string& path)
    {
        bool result;
        proxy_.callMethod("downloadFile").onInterface(INTERFACE_NAME).withArguments(accountId, conversationId, interactionId, fileId, path).storeResultsTo(result);
        return result;
    }

    uint32_t cancelDataTransfer(const std::string& accountId, const std::string& to, const std::string& fileId)
    {
        uint32_t result;
        proxy_.callMethod("cancelDataTransfer").onInterface(INTERFACE_NAME).withArguments(accountId, to, fileId).storeResultsTo(result);
        return result;
    }

    void monitor(const bool& continuous)
    {
        proxy_.callMethod("monitor").onInterface(INTERFACE_NAME).withArguments(continuous);
    }

    std::string startConversation(const std::string& accountId)
    {
        std::string result;
        proxy_.callMethod("startConversation").onInterface(INTERFACE_NAME).withArguments(accountId).storeResultsTo(result);
        return result;
    }

    void acceptConversationRequest(const std::string& accountId, const std::string& conversationId)
    {
        proxy_.callMethod("acceptConversationRequest").onInterface(INTERFACE_NAME).withArguments(accountId, conversationId);
    }

    void declineConversationRequest(const std::string& accountId, const std::string& conversationId)
    {
        proxy_.callMethod("declineConversationRequest").onInterface(INTERFACE_NAME).withArguments(accountId, conversationId);
    }

    bool removeConversation(const std::string& accountId, const std::string& conversationId)
    {
        bool result;
        proxy_.callMethod("removeConversation").onInterface(INTERFACE_NAME).withArguments(accountId, conversationId).storeResultsTo(result);
        return result;
    }

    std::vector<std::string> getConversations(const std::string& accountId)
    {
        std::vector<std::string> result;
        proxy_.callMethod("getConversations").onInterface(INTERFACE_NAME).withArguments(accountId).storeResultsTo(result);
        return result;
    }

    std::vector<std::map<std::string, std::string>> getConversationRequests(const std::string& accountId)
    {
        std::vector<std::map<std::string, std::string>> result;
        proxy_.callMethod("getConversationRequests").onInterface(INTERFACE_NAME).withArguments(accountId).storeResultsTo(result);
        return result;
    }

    void updateConversationInfos(const std::string& accountId, const std::string& conversationId, const std::map<std::string, std::string>& infos)
    {
        proxy_.callMethod("updateConversationInfos").onInterface(INTERFACE_NAME).withArguments(accountId, conversationId, infos);
    }

    std::map<std::string, std::string> conversationInfos(const std::string& accountId, const std::string& conversationId)
    {
        std::map<std::string, std::string> result;
        proxy_.callMethod("conversationInfos").onInterface(INTERFACE_NAME).withArguments(accountId, conversationId).storeResultsTo(result);
        return result;
    }

    void addConversationMember(const std::string& accountId, const std::string& conversationId, const std::string& contactUri)
    {
        proxy_.callMethod("addConversationMember").onInterface(INTERFACE_NAME).withArguments(accountId, conversationId, contactUri);
    }

    void removeConversationMember(const std::string& accountId, const std::string& conversationId, const std::string& contactUri)
    {
        proxy_.callMethod("removeConversationMember").onInterface(INTERFACE_NAME).withArguments(accountId, conversationId, contactUri);
    }

    std::vector<std::map<std::string, std::string>> getConversationMembers(const std::string& accountId, const std::string& conversationId)
    {
        std::vector<std::map<std::string, std::string>> result;
        proxy_.callMethod("getConversationMembers").onInterface(INTERFACE_NAME).withArguments(accountId, conversationId).storeResultsTo(result);
        return result;
    }

    void sendMessage(const std::string& accountId, const std::string& conversationId, const std::string& message, const std::string& parent)
    {
        proxy_.callMethod("sendMessage").onInterface(INTERFACE_NAME).withArguments(accountId, conversationId, message, parent);
    }

    uint32_t loadConversationMessages(const std::string& accountId, const std::string& conversationId, const std::string& fromMessage, const uint32_t& n)
    {
        uint32_t result;
        proxy_.callMethod("loadConversationMessages").onInterface(INTERFACE_NAME).withArguments(accountId, conversationId, fromMessage, n).storeResultsTo(result);
        return result;
    }

    uint32_t countInteractions(const std::string& accountId, const std::string& conversationId, const std::string& toId, const std::string& fromId, const std::string& authorUri)
    {
        uint32_t result;
        proxy_.callMethod("countInteractions").onInterface(INTERFACE_NAME).withArguments(accountId, conversationId, toId, fromId, authorUri).storeResultsTo(result);
        return result;
    }

    void connectivityChanged()
    {
        proxy_.callMethod("connectivityChanged").onInterface(INTERFACE_NAME);
    }

    void setDefaultModerator(const std::string& accountID, const std::string& peerURI, const bool& state)
    {
        proxy_.callMethod("setDefaultModerator").onInterface(INTERFACE_NAME).withArguments(accountID, peerURI, state);
    }

    std::vector<std::string> getDefaultModerators(const std::string& accountID)
    {
        std::vector<std::string> result;
        proxy_.callMethod("getDefaultModerators").onInterface(INTERFACE_NAME).withArguments(accountID).storeResultsTo(result);
        return result;
    }

    void enableLocalModerators(const std::string& accountID, const bool& isModEnabled)
    {
        proxy_.callMethod("enableLocalModerators").onInterface(INTERFACE_NAME).withArguments(accountID, isModEnabled);
    }

    bool isLocalModeratorsEnabled(const std::string& accountID)
    {
        bool result;
        proxy_.callMethod("isLocalModeratorsEnabled").onInterface(INTERFACE_NAME).withArguments(accountID).storeResultsTo(result);
        return result;
    }

    void setAllModerators(const std::string& accountID, const bool& allModerators)
    {
        proxy_.callMethod("setAllModerators").onInterface(INTERFACE_NAME).withArguments(accountID, allModerators);
    }

    bool isAllModerators(const std::string& accountID)
    {
        bool result;
        proxy_.callMethod("isAllModerators").onInterface(INTERFACE_NAME).withArguments(accountID).storeResultsTo(result);
        return result;
    }

private:
    sdbus::IProxy& proxy_;
};

}}} // namespaces

#endif
